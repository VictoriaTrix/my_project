import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from api import TOKEN
from city import get_cities, get_available_countries
from aiogram.client.default import DefaultBotProperties

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()


available_countries = get_available_countries()
country_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=country)] for country in available_countries],
    resize_keyboard=True
)

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ù–æ–≤–∞—è –∏–≥—Ä–∞"), KeyboardButton(text="–ü–æ–º–æ—â—å")],
        [KeyboardButton(text="–°—Ç–æ–ø")]
    ],
    resize_keyboard=True
)

active_games = {}

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –∏–≥—Ä—ã:", reply_markup=country_keyboard)

@dp.message(Command("newgame"))
async def new_game(message: types.Message):
    await start(message)

@dp.message(lambda message: message.text == "–ù–æ–≤–∞—è –∏–≥—Ä–∞")
async def new_game_button(message: types.Message):
    await start(message)

@dp.message(lambda message: message.text.strip() in available_countries)
async def select_country(message: types.Message):
    user_id = message.chat.id
    country = message.text.strip()

    cities = await get_cities(country) 

    if not cities:
        await message.answer(f" –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ—Ä–æ–¥–∞ –¥–ª—è {country}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    active_games[user_id] = {"cities": cities, "used_cities": set(), "last_letter": None}
    await message.answer(f"–°—Ç—Ä–∞–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞: {country}. –ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥!", reply_markup=main_keyboard)

@dp.message(Command("stop"))
async def stop_game(message: types.Message):
    user_id = message.chat.id
    if user_id in active_games:
        del active_games[user_id]
        await message.answer("–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é —Å –∫–æ–º–∞–Ω–¥–æ–π /newgame.")
    else:
        await message.answer("–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newgame, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

@dp.message(lambda message: message.text == "–°—Ç–æ–ø")
async def stop_game_button(message: types.Message):
    await stop_game(message)

@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äì –í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É –¥–ª—è –∏–≥—Ä—ã\n"
        "/newgame ‚Äì –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
        "/stop ‚Äì –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É\n"
        "/help ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )

@dp.message(lambda message: message.text == "–ü–æ–º–æ—â—å")
async def help_button(message: types.Message):
    await help_command(message)

@dp.message()
async def play_game(message: types.Message):
    user_id = message.chat.id
    city = message.text.strip().capitalize()

    if user_id not in active_games:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É –∫–æ–º–∞–Ω–¥–æ–π /start.")
        return

    game_data = active_games[user_id]

    if city in game_data["used_cities"]:
        await message.answer("–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ —É–∂–µ –±—ã–ª –Ω–∞–∑–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
        return

    if city not in game_data["cities"]:
        await message.answer("–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    if game_data["last_letter"] and not city.lower().startswith(game_data["last_letter"]):
        await message.answer(f"–ì–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã {game_data['last_letter'].upper()}!")
        return

    game_data["used_cities"].add(city)
    last_letter = city[-1] if city[-1] not in "—å—ä—ã" else city[-2]
    game_data["last_letter"] = last_letter

    available_cities = [c for c in game_data["cities"] if c[0].lower() == last_letter and c not in game_data["used_cities"]]

    if available_cities:
        bot_city = available_cities[0]
        game_data["used_cities"].add(bot_city)
        game_data["last_letter"] = bot_city[-1] if bot_city[-1] not in "—å—ä—ã" else bot_city[-2]
        await message.answer(f"üèôÔ∏è –í–∞—à –≥–æ—Ä–æ–¥: {city}\nü§ñ –ú–æ–π —Ö–æ–¥: {bot_city}. –í–∞—à —Ö–æ–¥!")
    else:
        await message.answer("üéâ –Ø –Ω–µ –∑–Ω–∞—é –±–æ–ª—å—à–µ –≥–æ—Ä–æ–¥–æ–≤! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!")
        del active_games[user_id]

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
